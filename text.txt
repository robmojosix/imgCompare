What I'm aiming to exaplin/what I want you to get from this talk:
• What's it for
• Good tools out there
• The problems I've faced with VR testing
• A possible new way of approaching them
• An example
• Other considerations

### What's it for
Whats the problem: Automated testing can't tell you if something doesn't look right, so UI regressions may go undetected.

Unit tests: lines of code
Feature/Medium tests: browser/user behaviour
Visual regression: UI regressions
(you wouldn't write a test that said ensure this button is 200px wide and ir red and is 20px from bottom)

(How much confidence do you have changing JS over css)

### Good tools out there

https://github.com/mojoaxel/awesome-regression-testing

Tools
    Wraith: from BBC Capture mode and history mode
    give it 2 domains and it compares them now or over time
    http://bbc-news.github.io/wraith/#before_capturehooks
    Allows you to add cutom JS.

    PhantomCSS: PhantomJS/CasperJS popular with frontenders  - no long being maintained
    Select part of a page or whole page - all configurable what to do when complete, when taking when comparing.
    You write your phantomCSS commands into your scenarios
    but these have to be writen using CasperJS

    Gemini: build on top of Selenium. Again, provides the test suite. You write the scenarios

    WebdriverCSS again the same.

    BackstopJS same again.

    jest-image-snapshot: https://www.npmjs.com/package/jest-image-snapshot same again.

    (ALL baked in framework - I have to write regression tests to use it.)

    On the other hand you have tools like:
    Resemble.js which only give you a comparing API. You need to write a framework around it. Offers too little.

    Other ideas

    Huxley from facebookyou create a scenario by manually navigating a site while huxley records.
    It records, mouse clicks and movements so it can replay them.
    You hit enter when you want a screen shot to be taken and huxley can then replay and compare later.
    (now deprecated)

    test-crawler: crawls your site and builds up a Visual regression suite.

    Specture: a tool soely for comaring images. It requires apps to send data to a running ruby server which (which is Specture)
    That can compare screenshots. You have to provide a list of screenshots. not good locally. Ruby App.
    https://medium.com/friday-people/how-we-do-visual-regression-testing-af63fa8b8eb1
    Late fail scenarios
Falls into a few categories:
Frameworks that do everything
Basic image comparing tools
Online services.
Crawling and fully automated services.

Where is the sweet spot. We have tools offering too much and some offering too little.

### The problems I've faced with VR testing
My experience: a UI lib and site.
UI was easier but felt less effective. Where I wanted the reassurance was at a site level.
Changing components. Consumers have no idea what's coming

### A possible new way of approaching them

My issues: VR frameworks, leads to writing separate tests.

We have feature tests and visual regression testing, can we unify them.
But still keep tech concerns separate Ie: the part that does the compare with the
part that tells the story of the feature.

Introducing Feature Storyboarding. or FeatureBoarding.
Based on storyBoarding.
Apps should use whichever tech they want to add screen shots into those BDD tests.
Ultimatley bringing them to life.
You would have a visual record of every feature journey.
Like a comic of the app.

Comparing them with visual regression is a separate concern.

### An example

stage-1
Try to storyboard the existing add todos feature.
Screenshot names are bad. Before and after hooks don't really work

stage-2
Improved file naming

stage-3
I find the tests hard to read - Ben did a talk on the benefits of BDD and cucumber for writing behaviour tests
Add cucmber-cupress for BDD style tests
Trying to make the tests more BDD inline with the screenshot testing

stage-4
Add screenshots

But more interestingly I looked at the screenshots, they didn't tell the story of the feature and that's what I was trying to explore.
It was like BDD in a visual sense. The images were driving and pushing my ideas on how the tests should be written. This looked wrong to me.

There was so much repeatition. And if we look in the tests yes, so much of this is repeated.

Found it hard to automate using snapshots by just converting existing to cucumber
Realised that medium/feature tests and visual overlap

QUOTE: Feature tests are all about what the user sees
So lets make the beaviour tests just mimic user behaviour and not make assertions
Requires you to look a snapshot to validate changes - can pass to stakeholders

Jump to stage-6
2 things
1. Removed duplication in test by storyboarding on paper first and writing the tests to accommodate
    We can add a whitespace test to the existing scenario
    The fact that the quantity increases we get for free.
2. Adding snapshot command to solve DSL issue
(but this defeats the object of making it seamless) normal cypress might be better
So actually the vanilla cypress would probably be better as the DSL for cucumber cypress maps scenarios to it blocks
so beforeEachs don't work asthey map to scenarios

Now we have our stroyboards we need a tool to test the images.
Show imgcompare
config
how it works
interface

Show with Visregression
Whitespace removed from text - save for unit tests

Imagine using it as a dev.
Imagine being asked what happend when a user gets their password wrong or their balance runs out midway thorugh a game and x and y.
Well look it up.
If it aint there, it wasn't requested. Biz can ask for it or leave it.
Benefit from historical analysis - you can check feature from 1year 2 years etc

No framework, no doubling up on tests. No getting lazy and leaving out half you VR tests
Perfect documentation.

### Other considerations.

With VR
visual regression anomalies (different browsers) 
Having our npm package running in docker -- to eliminate cross-platform rendering shenanigans
Annimations /transitions - but were an issue with feature tests anyway
Storing images remotely.
pipelines
Automation - when to run

With feature storyboarding
Can't really do BDD - visual regression is backward looking
You can't write a feature and BDD it.
Your code is the test. You would need a whole new way of BDDing. ie: you write the code in TDD fashion which runs and builds
the feature story boards. You show these to stakeholders who sign them off and then you refactor - not very fast tho

OR how about we get the initial images as storyboards from UX and we fail our tests against these. Then we write code to those images
until they pass. Not very itterative but could be made better.
